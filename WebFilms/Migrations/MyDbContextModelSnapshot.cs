// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebFilms.DataAccess;

namespace WebFilms.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebFilms.DataAccess.Entity.Comment", b =>
                {
                    b.Property<string>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(160);

                    b.Property<string>("FilmId");

                    b.Property<string>("UserId");

                    b.HasKey("CommentId");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WebFilms.DataAccess.Entity.Film", b =>
                {
                    b.Property<string>("FilmId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GenreId");

                    b.Property<string>("ImageXPath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85);

                    b.HasKey("FilmId");

                    b.HasIndex("GenreId");

                    b.ToTable("Films");

                    b.HasData(
                        new { FilmId = "d073435c-263a-4e85-9232-d4846c2a81cd", GenreId = 3, Name = "Star Wars" }
                    );
                });

            modelBuilder.Entity("WebFilms.DataAccess.Entity.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85);

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new { GenreId = 1, Name = "Action" },
                        new { GenreId = 2, Name = "Drama" },
                        new { GenreId = 3, Name = "Comedy" },
                        new { GenreId = 4, Name = "Adventure" },
                        new { GenreId = 5, Name = "Documentaly" },
                        new { GenreId = 6, Name = "Horror" },
                        new { GenreId = 7, Name = "Romance" }
                    );
                });

            modelBuilder.Entity("WebFilms.DataAccess.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(85);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(85);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "3204f2d6-cdcd-4961-8ee0-921576001dd7", Email = "zyglin@mail.ru", PasswordHash = "15000|zXtoSF6r2iAWjzmd|73JsUU96msyhfUwboD+o/ZaQFugf+N1053RoJocrpPk=" }
                    );
                });

            modelBuilder.Entity("WebFilms.DataAccess.Entity.Comment", b =>
                {
                    b.HasOne("WebFilms.DataAccess.Entity.Film", "Film")
                        .WithMany("Comments")
                        .HasForeignKey("FilmId");

                    b.HasOne("WebFilms.DataAccess.Entity.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebFilms.DataAccess.Entity.Film", b =>
                {
                    b.HasOne("WebFilms.DataAccess.Entity.Genre", "Genre")
                        .WithMany("Films")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
